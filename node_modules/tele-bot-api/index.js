/*

@azkadev

*/

var lib = require("./src/js/api");
var path = require("path");
var youtube_id = "UCj9stNGVvQJspYMp8-lG_ng";
var app = require("azka-server")({ logger: false, ignoreTrailingSlash: true, trustProxy: true });
const nodefetch = require("node-fetch");

class telegram {
    constructor(token, options = {}) {
        this.optiondef = {
            botPath: "/bot/",
            userPath: "/user/",
            port: 8080,
            type: "bot",
            api: false,
            logger: false
        };
        this.url = (options.api) ? this.optiondef.api = options.api : options.api = 'https://api.telegram.org/';
        this.options = this.invokeSync(this.optiondef, options);
        this.token = token;
        this.app = app;
        this.api = new lib.Api(token, this.options);
    }

    async loginUser(phone, url) {
        if (!phone || url) {
            throw {
                message: "please use token"
            };
        }
        var option = {
            'method': 'POST',
            'headers': {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            "body": JSON.stringify({
                "phone_number": phone
            })
        };
        var url = `${url}/userlogin`;
        var response = await nodefetch(url, option);
        if (this.options.logger) {
            console.log(JSON.stringify(response, null, 2));
        }
        if (response.status == 200) {
            return await response.json();
        } else {
            var msg = await response.json();
            throw {
                message: msg
            };
        }
    }

    onBot(callback) {

        app.get(this.options.botPath, function (req, res) {
            return res.status(200).send("helo");
        });

        app.post(this.options.botPath, function (req, res) {
            var json = {};
            json.query = req.query;
            json.body = req.body;
            res.status(200).send(json);
            return callback(json, res);
        });
    }

    onUser(callback) {

        app.get(this.options.userPath, function (req, res) {
            return res.status(200).send("helo");
        });

        app.post(this.options.userPath, function (req, res) {
            var json = {};
            json.query = req.query;
            json.body = req.body;
            res.status(200).send(json);
            return callback(json, res);
        });
    }
    start() {
        app.register(require('fastify-static'), {
            root: path.join(__dirname, 'public'),
            prefix: '/', // optional: default '/'
        });
        app.listen({ port: Number(this.options.port), host: '0.0.0.0', backlog: 511 }, async function (err, addres) {
            if (err) throw err;
            console.log(`bot on ${addres}`);
        });
    }


    invokeSync(json, object) {
        if (object) {
            for (var key in object) {
                if (Object.hasOwnProperty.call(object, key)) {
                    var loop_data = object[key];
                    json[key] = loop_data;
                }
            }
            return json;
        } else {
            return json;
        }
    }

    newBot(token) {
        var option = this.options;
        option.type = "bot";
        return {
            api: new lib.Api(token, option)
        };
    }

    newUser(token) {
        var option = this.options;
        option.type = "user";
        return {
            api: new lib.Api(token, option)
        };
    }
}

class TelegramUser {
    constructor(token, options = {}) {
        this.optiondef = {
            botPath: "/bot/",
            userPath: "/user/",
            port: 8080,
            type: "bot",
            api: false,
            logger: false
        };
        this.url = (options.api) ? this.optiondef.api = options.api : options.api = 'https://api.telegram.org/';
        this.options = this.invokeSync(this.optiondef, options);
        this.token = token;
        this.app = app;
        this.api = new lib.Api(token, this.options);
    }

    onBot(callback) {

        app.get(this.options.botPath, function (req, res) {
            return res.status(200).send("helo");
        });

        app.post(this.options.botPath, function (req, res) {
            var json = {};
            json.query = req.query;
            json.body = req.body;
            res.status(200).send(json);
            return callback(json, res);
        });
    }

    onUser(callback) {

        app.get(this.options.userPath, function (req, res) {
            return res.status(200).send("helo");
        });

        app.post(this.options.userPath, function (req, res) {
            var json = {};
            json.query = req.query;
            json.body = req.body;
            res.status(200).send(json);
            return callback(json, res);
        });
    }
    start() {
        app.register(require('fastify-static'), {
            root: path.join(__dirname, 'public'),
            prefix: '/', // optional: default '/'
        });
        app.listen({ port: Number(this.options.port), host: '0.0.0.0', backlog: 511 }, async function (err, addres) {
            if (err) throw err;
            console.log(`bot on ${addres}`);
        });
    }


    invokeSync(json, object) {
        if (object) {
            for (var key in object) {
                if (Object.hasOwnProperty.call(object, key)) {
                    var loop_data = object[key];
                    json[key] = loop_data;
                }
            }
            return json;
        } else {
            return json;
        }
    }

    newBot(token) {
        var option = this.options;
        option.type = "bot";
        return {
            api: new lib.Api(token, option)
        };
    }

    newUser(token) {
        var option = this.options;
        option.type = "user";
        return {
            api: new lib.Api(token, option)
        };
    }
}

module.exports = {
    telegram, TelegramUser
};
